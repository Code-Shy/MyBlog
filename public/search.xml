<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>标量、向量、矩阵和张量</title>
      <link href="/2023/07/26/deeplearn/"/>
      <url>/2023/07/26/deeplearn/</url>
      
        <content type="html"><![CDATA[<h1 id="1-标量、向量、矩阵"><a href="#1-标量、向量、矩阵" class="headerlink" title="1. 标量、向量、矩阵"></a>1. 标量、向量、矩阵</h1><h2 id="1-1-标量"><a href="#1-1-标量" class="headerlink" title="1.1 标量"></a>1.1 标量</h2><p><strong>标量（scalar）</strong>：一个标量就是单独的一个数。</p><h2 id="1-2-向量"><a href="#1-2-向量" class="headerlink" title="1.2 向量"></a>1.2 向量</h2><p><strong>向量（vector）</strong>：一个向量是一列数，这些数是有序排列的，通过次序中的索引，我们可以确定每个单独的数。</p><h2 id="1-3-矩阵"><a href="#1-3-矩阵" class="headerlink" title="1.3 矩阵"></a>1.3 矩阵</h2><p><strong>矩阵（matrix）</strong>：矩阵是一个二维数组，其中的每一个元素由两个索引（而非一个）所确定。</p><h1 id="2-张量"><a href="#2-张量" class="headerlink" title="2. 张量"></a>2. 张量</h1><h2 id="2-1-张量的简介"><a href="#2-1-张量的简介" class="headerlink" title="2.1 张量的简介"></a>2.1 张量的简介</h2><p><strong>张量（tensor）</strong>：张量的本质是一个多维数组，目的是为了创造更高维度的矩阵、向量。</p><h2 id="2-2-张量的实现（Pytorch）"><a href="#2-2-张量的实现（Pytorch）" class="headerlink" title="2.2 张量的实现（Pytorch）"></a>2.2 张量的实现（Pytorch）</h2><h3 id="2-2-1-张量的创建"><a href="#2-2-1-张量的创建" class="headerlink" title="2.2.1 张量的创建"></a>2.2.1 张量的创建</h3><p>张量可以通过<strong>创建函数(序列)</strong> 的方式来创建，序列可以是列表、元组或者数组。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="2-2-2-张量的类型"><a href="#2-2-2-张量的类型" class="headerlink" title="2.2.2 张量的类型"></a>2.2.2 张量的类型</h3><p>张量拥有<code>dtype</code>方法，来返回张量的类型，创建整数型数组时，默认是<code>int64</code>类型（长整型），创建浮点型数组时，默认是<code>float32</code>类型（单精度浮点型）。Pytorch中的Tensor类型如下：</p><table><thead><tr><th align="center">数据类型</th><th align="center">dtype</th></tr></thead><tbody><tr><td align="center">32bit浮点数</td><td align="center">torch.float32或torch.float</td></tr><tr><td align="center">64bit浮点数</td><td align="center">torch.float64或torch.double</td></tr><tr><td align="center">16bit浮点数</td><td align="center">torch.float16或torch.half</td></tr><tr><td align="center">8bit无符号整数</td><td align="center">torch.unit8</td></tr><tr><td align="center">8bit有符号整数</td><td align="center">torch.int8</td></tr><tr><td align="center">16bit有符号整数</td><td align="center">torch.int16或torch.short</td></tr><tr><td align="center">16bit有符号整数</td><td align="center">torch.int16或torch.short</td></tr><tr><td align="center">32bit有符号整数</td><td align="center">torch.int32或torch.int</td></tr><tr><td align="center">64bit有符号整数</td><td align="center">torch.int64或torch.long</td></tr><tr><td align="center">布尔型</td><td align="center">torch.bool</td></tr><tr><td align="center">复数型</td><td align="center">torch.complex64</td></tr></tbody></table><h3 id="2-2-3-张量类型的转化"><a href="#2-2-3-张量类型的转化" class="headerlink" title="2.2.3 张量类型的转化"></a>2.2.3 张量类型的转化</h3><ul><li><p>当张量各元素属于不同类型时，系统会自动进行隐式转化。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浮点型和整数型的隐式转化 =&gt; 浮点型</span></span><br><span class="line">torch.tensor([<span class="number">1.1</span>, <span class="number">2</span>]).dtype </span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔型和数值型的隐式转化 =&gt; 数值型</span></span><br><span class="line">torch.tensor([<span class="literal">True</span>, <span class="number">2.0</span>])</span><br></pre></td></tr></table></figure></li><li><p>利用Pytorch中的<code>int()</code>等方法进行转化。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转化为默认浮点型（32位）</span></span><br><span class="line">t.<span class="built_in">float</span>()</span><br></pre></td></tr></table></figure></li><li><p><strong>Point</strong> ：</p><p>- 当在<code>torch</code>函数中使用<code>dtype</code>参数时候，需要输入<code>torch.float</code>表示精度；</p><p>- 在使用方法进行类型转化时，方法名称则是double。（虽然<code>torch.float</code>和<code>double</code>都表示双精度浮点型。）</p></li></ul><h3 id="2-2-4-张量的维度与形变"><a href="#2-2-4-张量的维度与形变" class="headerlink" title="2.2.4 张量的维度与形变"></a>2.2.4 张量的维度与形变</h3><ul><li>零维张量：我们可将零维张量视为拥有张量属性的单独一个数。</li><li>高维张量：三维及三维以上的张量，我们就将其称为高维张量。</li></ul><h3 id="2-2-5-张量的浅拷贝和深拷贝"><a href="#2-2-5-张量的浅拷贝和深拷贝" class="headerlink" title="2.2.5 张量的浅拷贝和深拷贝"></a>2.2.5 张量的浅拷贝和深拷贝</h3><p>在实现中，用<code>=</code>得到的张量输入浅拷贝的张量，原张量一旦发生修改，那么拷贝后的张量也会对应发生修改，而使用<code>clone()</code>方法得到的张量属于深拷贝张量，这种方法得到的张量并不会因为原张量修改而变化。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t1 = tensor([ 1, 2,  3,  4,  5,  6,  7,  8,  9, 10])</span></span><br><span class="line">t2 = t1</span><br><span class="line">t1[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># t1 = tensor([ 1, 10,  3,  4,  5,  6,  7,  8,  9, 10])</span></span><br><span class="line"><span class="comment"># t2 = tensor([ 1, 10,  3,  4,  5,  6,  7,  8,  9, 10])</span></span><br><span class="line"><span class="comment"># 同步修改</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t1 = tensor([ 1, 2,  3,  4,  5,  6,  7,  8,  9, 10])</span></span><br><span class="line">t2 = t1.clone()</span><br><span class="line">t1[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># t1 = tensor([ 1, 10,  3,  4,  5,  6,  7,  8,  9, 10])</span></span><br><span class="line"><span class="comment"># t2 = tensor([ 1, 2,  3,  4,  5,  6,  7,  8,  9, 10])</span></span><br><span class="line"><span class="comment"># 没有出现同步修改</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
